/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.scaladsl

import akka.stream.scaladsl.FlowGraph.FlowGraphBuilder
import akka.stream.scaladsl.Graphs.{ Graph, Ports, InPort, OutPort }

trait FlowApply {

  def apply[I, O]()(block: FlowGraphBuilder ⇒ (Graphs.InPort[I], Graphs.OutPort[O])): Flow[I, O, Unit] = {
    val builder = new FlowGraphBuilder
    val (inlet, outlet) = block(builder)
    builder.buildFlow(inlet, outlet)
  }

  def apply[I, O, Mat](g1: Graph[Ports, Mat])(buildBlock: FlowGraphBuilder => (g1.Ports) ⇒ (Graphs.InPort[I], Graphs.OutPort[O])): Flow[I, O, Mat] = {
    val builder = new FlowGraphBuilder
    val p = builder.importGraph(g1, Keep.right)
    val (inlet, outlet) = buildBlock(builder)(p)
    builder.buildFlow(inlet, outlet)
  }
  
  [2..#def apply[I, O, [#M1#], Mat]([#g1: Graph[Ports, M1]#])(combineMat: ([#M1#]) => Mat)(
    buildBlock: FlowGraphBuilder => ([#g1.Ports#]) ⇒ (Graphs.InPort[I], Graphs.OutPort[O])): Flow[I, O, Mat] = {
    val builder = new FlowGraphBuilder
    val curried = combineMat.curried
    val p##1 = builder.importGraph(g##1, (_: Any, m##1: M##1) ⇒ curried(m##1))
    [2..#val p1 = builder.importGraph(g1, (f: M1 ⇒ Any, m1: M1) ⇒ f(m1))#
    ]
    val (inlet, outlet) = buildBlock(builder)([#p1#])
    builder.buildFlow(inlet, outlet)
  }#
  
  ]

}
